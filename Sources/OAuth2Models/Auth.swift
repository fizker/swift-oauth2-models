import Foundation

/// [4.1.1.](https://tools.ietf.org/html/rfc6749#section-4.1.1) Authorization Request
///
/// The client constructs the request URI by adding the following
/// parameters to the query component of the authorization endpoint URI
/// using the "application/x-www-form-urlencoded" format, per Appendix B.
public struct AuthRequest: Codable, Equatable {
	public enum CodingKeys: String, CodingKey {
		case clientID = "client_id"
		case responseType = "response_type"
		case redirectURL = "redirect_uri"
		case state
		case scope
	}

	/// Available response types.
	public enum ResponseType: String, Codable { case code }

	/// REQUIRED.  Value MUST be set to "code".
	public var responseType: ResponseType

	/// REQUIRED.  The client identifier as described in Section 2.2.
	public var clientID: String

	/// OPTIONAL.  As described in Section 3.1.2.
	public var redirectURL: URL?

	/// OPTIONAL.  The scope of the access request as described by Section 3.3.
	public var scope: String?

	/// RECOMMENDED.  An opaque value used by the client to maintain
	/// state between the request and callback.
	///
	/// The authorization server includes this value when redirecting the user-agent back
	/// to the client.  The parameter SHOULD be used for preventing
	/// cross-site request forgery as described in Section 10.12.
	public var state: String?

	/// Creates a new `AuthRequest`.
	///
	/// - Parameter responseType: The type of the response.
	/// - Parameter clientID: The client identifier.
	/// - Parameter redirectURL: The URL that the response should be redirected to.
	/// - Parameter state: A state property that the response should include.
	/// - Parameter scope: The scope of the access request.
	public init(
		responseType: ResponseType = .code,
		clientID: String,
		redirectURL: URL,
		state: String?,
		scope: String?
	) {
		self.responseType = responseType
		self.clientID = clientID
		self.redirectURL = redirectURL
		self.state = state
		self.scope = scope
	}

	/// Creates a new `AuthRequest` without a redirect URL.
	///
	/// - Parameter responseType: The type of the response.
	/// - Parameter clientID: The client identifier.
	/// - Parameter state: A state property that the response should include.
	/// - Parameter scope: The scope of the access request.
	public init(
		responseType: ResponseType = .code,
		clientID: String,
		state: String?,
		scope: String?
	) {
		self.responseType = responseType
		self.clientID = clientID
		self.redirectURL = nil
		self.state = state
		self.scope = scope
	}

	/// Creates a new `AuthResponse` based on this request.
	///
	/// - Parameter code: The authorization code to use when requesting an access token.
	public func response(code: String) -> AuthResponse {
		AuthResponse(code: code, request: self)
	}

	/// Creates a new `AuthError` based on this request.
	///
	/// - Parameter code: A machine-readable error code.
	/// - Parameter description: A human-readable description.
	/// - Parameter url: A URL to a human-readable web page.
	/// - Throws: `AuthError.CharacterSetError` if the description or URL contains invalid characters.
	public func error(code: AuthError.ErrorCode, description: String?, url: URL) throws -> AuthError {
		try AuthError(code: code, request: self, description: description, url: url)
	}

	/// Creates a new `AuthError` without an error page URL  based on this request.
	///
	/// - Parameter code: A machine-readable error code.
	/// - Parameter description: A human-readable description.
	/// - Throws: `AuthError.CharacterSetError` if the description contains invalid characters.
	public func error(code: AuthError.ErrorCode, description: String?) throws -> AuthError {
		try AuthError(code: code, request: self, description: description)
	}
}

/// [4.1.2.](https://tools.ietf.org/html/rfc6749#section-4.1.2) Authorization Response
///
/// If the resource owner grants the access request, the authorizatio
/// server issues an authorization code and delivers it to the client b
/// adding the following parameters to the query component of th
/// redirection URI using the "application/x-www-form-urlencoded" format
/// per Appendix B.
public struct AuthResponse: Codable, Equatable {
	public enum CodingKeys: String, CodingKey {
		case code, state
	}

	/// REQUIRED.  The authorization code generated by the
	/// authorization server.  The authorization code MUST expire
	/// shortly after it is issued to mitigate the risk of leaks.
	///
	/// A maximum authorization code lifetime of 10 minutes is
	/// RECOMMENDED.  The client MUST NOT use the authorization code
	/// more than once.  If an authorization code is used more than
	/// once, the authorization server MUST deny the request and SHOULD
	/// revoke (when possible) all tokens previously issued based on
	/// that authorization code.  The authorization code is bound to
	/// the client identifier and redirection URI.
	public var code: String

	/// REQUIRED if the "state" parameter was present in the client
	/// authorization request.  The exact value received from the
	/// client.
	public var state: String?

	/// Creates a new AuthResponse.
	///
	/// - Parameter code: The authorization code to use when requesting an access token.
	/// - Parameter request: The `AuthRequest` that spawned the response.
	public init(code: String, request: AuthRequest) {
		self.code = code
		self.state = request.state
	}
}

/// [4.1.2.1.](https://tools.ietf.org/html/rfc6749#section-4.1.2.1)  Error Response
///
/// If the request fails due to a missing, invalid, or mismatching
/// redirection URI, or if the client identifier is missing or invalid,
/// the authorization server SHOULD inform the resource owner of the
/// error and MUST NOT automatically redirect the user-agent to the
/// invalid redirection URI.
///
/// If the resource owner denies the access request or if the request
/// fails for reasons other than a missing or invalid redirection URI,
/// the authorization server informs the client by adding the following
/// parameters to the query component of the redirection URI using the
/// "application/x-www-form-urlencoded" format, per Appendix B.
public struct AuthError: Codable, Equatable {
	/// Error thrown during the init function
	public enum CharacterSetError: Swift.Error {
		/// Thrown when the description contains invalid characters.
		case invalidCharacterInDescription
		/// Thrown when the URL contains invalid characters.
		case invalidCharacterInURL
	}

	public enum CodingKeys: String, CodingKey {
		case code = "error"
		case description = "error_description"
		case url = "error_uri"
		case state
	}

	/// The available error codes.
	public enum ErrorCode: String, Codable {
		/// The request is missing a required parameter, includes an
		/// invalid parameter value, includes a parameter more than
		/// once, or is otherwise malformed.
		case invalidRequest = "invalid_request"

		/// The client is not authorized to request an authorization
		/// code using this method.
		case unauthorizedClient = "unauthorized_client"

		/// The resource owner or authorization server denied the request.
		case accessDenied = "access_denied"

		/// The authorization server does not support obtaining an
		/// authorization code using this method.
		case unsupportedResponseType = "unsupported_response_type"

		/// The requested scope is invalid, unknown, or malformed.
		case invalidScope = "invalid_scope"

		/// The authorization server encountered an unexpected
		/// condition that prevented it from fulfilling the request.
		/// (This error code is needed because a 500 Internal Server
		/// Error HTTP status code cannot be returned to the client
		/// via an HTTP redirect.)
		case serverError = "server_error"

		/// The authorization server is currently unable to handle
		/// the request due to a temporary overloading or maintenance
		/// of the server.  (This error code is needed because a 503
		/// Service Unavailable HTTP status code cannot be returned
		/// to the client via an HTTP redirect.)
		case temporarilyUnavailable = "temporarily_unavailable"
	}

	/// REQUIRED.  A single ASCII [USASCII] error code
	public var code: ErrorCode

	/// OPTIONAL.  Human-readable ASCII [USASCII] text providing
	/// additional information, used to assist the client developer in
	/// understanding the error that occurred.
	/// Values for the "error_description" parameter MUST NOT include
	/// characters outside the set %x20-21 / %x23-5B / %x5D-7E.
	public var description: String?

	/// OPTIONAL.  A URI identifying a human-readable web page with
	/// information about the error, used to provide the client
	/// developer with additional information about the error.
	/// Values for the "error_uri" parameter MUST conform to the
	/// URI-reference syntax and thus MUST NOT include characters
	/// outside the set %x21 / %x23-5B / %x5D-7E.
	public var url: URL?

	/// REQUIRED if a "state" parameter was present in the client
	/// authorization request.  The exact value received from the
	/// client.
	public var state: String?

	private init(
		code: ErrorCode,
		request: AuthRequest,
		description: String?,
		url: URL?
	) throws {
		self.code = code
		self.description = description
		self.url = url
		self.state = request.state

		if let description = description {
			guard ValidCharacterSet.text.isValid(description)
			else { throw CharacterSetError.invalidCharacterInDescription }
		}

		if let url = url?.absoluteString {
			guard ValidCharacterSet.url.isValid(url)
			else { throw CharacterSetError.invalidCharacterInURL }
		}
	}

	/// Creates a new `AuthError`.
	///
	/// - Parameter code: A machine-readable error code.
	/// - Parameter request: The `AuthRequest` that spawned the error.
	/// - Parameter description: A human-readable description.
	/// - Parameter url: A URL to a human-readable web page.
	/// - Throws: `AuthError.CharacterSetError` if the description or URL contains invalid characters.
	public init(
		code: ErrorCode,
		request: AuthRequest,
		description: String?,
		url: URL
	) throws {
		try self.init(code: code, request: request, description: description, url: url as URL?)
	}

	/// Creates a new `AuthError` without an error page URL.
	///
	/// - Parameter code: A machine-readable error code.
	/// - Parameter request: The `AuthRequest` that spawned the error.
	/// - Parameter description: A human-readable description.
	/// - Throws: `AuthError.CharacterSetError` if the description contains invalid characters.
	public init(
		code: ErrorCode,
		request: AuthRequest,
		description: String?
	) throws {
		try self.init(code: code, request: request, description: description, url: nil)
	}
}
