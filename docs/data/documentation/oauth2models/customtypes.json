{
  "abstract" : [
    {
      "text" : "The OAuth2 standard is open, meaning that new Grant Types and custom properties are allowed.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/CustomTypes"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "OAuth2Models"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Custom Grant Types and Properties"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The standard allows for adding custom Grant Types and custom properties.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Custom-Grant-Types",
          "level" : 3,
          "text" : "Custom Grant Types",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The OAuth2 standard is open-ended, so that new ",
              "type" : "text"
            },
            {
              "code" : "Grant Type",
              "type" : "codeVoice"
            },
            {
              "text" : "s can be added as necessary.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This does mean that it is possible to require types that this library does not support.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In that case, the solution is simple. The ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/GrantRequest",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " throws an error if an",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unknown ",
              "type" : "text"
            },
            {
              "code" : "Grant Type",
              "type" : "codeVoice"
            },
            {
              "text" : " is detected.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "app.post(\"token\") { req -> String in",
            "\tdo {",
            "\t\tlet grant = try req.content.decode(GrantRequest.self)",
            "\t\t...",
            "",
            "\t} catch let GrantRequest.Error.unknownGrantType(type)",
            "\t\twhere type == \"my-custom-grant-type\"",
            "\t{",
            "\t\tlet customRequest = try req.content.decode(MyCustomType.self)",
            "\t\t...",
            "\t}",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternatively, the custom type could be handled first, and only try the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "types if the custom type cannot decode. Care should be taken though to ensure that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the custom type is as strict as possible, so that it does not absorb values of the other types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Decoding-custom-properties",
          "level" : 3,
          "text" : "Decoding custom properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Decoding custom properties is simple, because of the way that Swift handle decoding.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The basic concept is to make a type containing only the custom properties, and then",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "simply decoding the content twice.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct CustomModel: Codable {",
            "\t\/\/ This is Optional because it is not part of the standard.",
            "\tvar customProperty: String?",
            "}",
            "",
            "app.post(\"token\") { req in",
            "\tlet request = try req.content.decode(PasswordAccessTokenRequest.self)",
            "\tlet custom = try req.content.decode(CustomModel.self)",
            "\t...",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Encoding-custom-properties",
          "level" : 3,
          "text" : "Encoding custom properties",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Encoding customer properties are a tad more complicated than decoding, because",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "each encoding would create an isolated result. So instead, a wrapper type is required:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct MultipleValuesEncoder: Encodable {",
            "\t\/\/\/ The items are encoded in the order that they have in the array, in case any property names overlap.",
            "\tvar items: [Encodable]",
            "",
            "\tfunc encode(to encoder: Encoder) throws {",
            "\t\ttry items.map { try $0.encode(to: encoder) }",
            "\t}",
            "}",
            "",
            "func sendRequest(_ request: PasswordAccessTokenRequest) async throws {",
            "\tlet customModel = CustomModel(customProperty: \"some value\")",
            "\tlet content = MultipleValuesEncoder(items: [ request, customModel ])",
            "\tawait post(content, to: \"\/token\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/CharacterSetValidationError",
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/ErrorDescription",
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/ErrorURL",
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/Scope",
        "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/TokenExpiration"
      ],
      "title" : "Miscellaneous"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/oauth2models\/customtypes"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://OAuth2Models/documentation/OAuth2Models": {
  "abstract" : [
    {
      "code" : "Codable",
      "type" : "codeVoice"
    },
    {
      "text" : " models for handling OAuth2 requests.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "OAuth2Models",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models"
},
"doc://OAuth2Models/documentation/OAuth2Models/CharacterSetValidationError": {
  "abstract" : [
    {
      "text" : "Error thrown when a string includes invalid characters.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CharacterSetValidationError"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/CharacterSetValidationError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CharacterSetValidationError"
    }
  ],
  "role" : "symbol",
  "title" : "CharacterSetValidationError",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/charactersetvalidationerror"
},
"doc://OAuth2Models/documentation/OAuth2Models/ErrorDescription": {
  "abstract" : [
    {
      "text" : "Wraps the description field of the error models and ensures that it contains only the characters that the spec allows.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ErrorDescription"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/ErrorDescription",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ErrorDescription"
    }
  ],
  "role" : "symbol",
  "title" : "ErrorDescription",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/errordescription"
},
"doc://OAuth2Models/documentation/OAuth2Models/ErrorURL": {
  "abstract" : [
    {
      "text" : "Wraps the URL field of the error models and ensures that it contains only the characters that the spec allows.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ErrorURL"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/ErrorURL",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ErrorURL"
    }
  ],
  "role" : "symbol",
  "title" : "ErrorURL",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/errorurl"
},
"doc://OAuth2Models/documentation/OAuth2Models/GrantRequest": {
  "abstract" : [
    {
      "text" : "Convenience ",
      "type" : "text"
    },
    {
      "code" : "Decodable",
      "type" : "codeVoice"
    },
    {
      "text" : " to make it easier to have a single endpoint support all grant types.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "GrantRequest"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/GrantRequest",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "GrantRequest"
    }
  ],
  "role" : "symbol",
  "title" : "GrantRequest",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/grantrequest"
},
"doc://OAuth2Models/documentation/OAuth2Models/Scope": {
  "abstract" : [
    {
      "text" : "Represents a list of scopes. The items are distinct.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Scope"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/Scope",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Scope"
    }
  ],
  "role" : "symbol",
  "title" : "Scope",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/scope"
},
"doc://OAuth2Models/documentation/OAuth2Models/TokenExpiration": {
  "abstract" : [
    {
      "text" : "The duration that a token is valid.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "TokenExpiration"
    }
  ],
  "identifier" : "doc:\/\/OAuth2Models\/documentation\/OAuth2Models\/TokenExpiration",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "TokenExpiration"
    }
  ],
  "role" : "symbol",
  "title" : "TokenExpiration",
  "type" : "topic",
  "url" : "\/documentation\/oauth2models\/tokenexpiration"
}
}
}